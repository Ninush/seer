s_x = 1.07, s_y = 1.07, s_width=.5, s_height=.5,
p_size = 28,
h_color="slateblue1", h_fill="mediumspringgreen", p_color = "navy",
filename="seer.png")
sticker(imgurl, package="seer",
s_x = 1.07, s_y = 1.07, s_width=.5, s_height=.5,
p_size = 28,
h_color="slateblue1", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker(imgurl, package="seer",
s_x = 1.07, s_y = 1.07, s_width=.5, s_height=.5,
p_size = 28,
h_color="mediumspringgreen", h_fill="mediumspringgreen", p_color = "navy",
filename="seer.png")
sticker(imgurl, package="seer",
s_x = 1.07, s_y = 1.07, s_width=.5, s_height=.5,
p_size = 28,
h_color="navy", h_fill="mediumspringgreen", p_color = "navy",
filename="seer.png")
sticker(imgurl, package="seer",
s_x = 1.07, s_y = 1.07, s_width=.3, s_height=.3,
p_size = 28,
h_color="navy", h_fill="mediumspringgreen", p_color = "navy",
filename="seer.png")
sticker(imgurl, package="seer",
s_x = 2.07, s_y = 1.07, s_width=.3, s_height=.3,
p_size = 28,
h_color="navy", h_fill="mediumspringgreen", p_color = "navy",
filename="seer.png")
sticker(imgurl, package="seer",
s_x = 1, s_y = 1.07, s_width=.3, s_height=.3,
p_size = 28,
h_color="navy", h_fill="mediumspringgreen", p_color = "navy",
filename="seer.png")
sticker("hexsticker/crystal.png", package="seer",
s_x = 1, s_y = 1.07, s_width=.3, s_height=.3,
p_size = 28,
h_color="navy", h_fill="mediumspringgreen", p_color = "navy",
filename="seer.png")
sticker("hexsticker/crystal.png", package="seer",
s_x = 1, s_y = 1.07, s_width=.3, s_height=.3,
p_size = 28,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("hexsticker/crystal.png", package="seer",
s_x = 1.07, s_y = .07, s_width=.3, s_height=.3,
p_size = 28,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("hexsticker/crystal.png", package="seer",
s_x = 1.07, s_y = .1, s_width=.3, s_height=.3,
p_size = 28,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("hexsticker/crystal.png", package="seer",
s_x = 1.07, s_y = 0.5, s_width=.3, s_height=.3,
p_size = 28,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("hexsticker/crystal.png", package="seer",
s_x = 1.07, s_y = 0.8, s_width=.3, s_height=.3,
p_size = 28,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
plot(M4[[1]]$x)
sticker("hexsticker/crystal.png", package="seer",
s_x = 1.07, s_y = 0.8, s_width=.3, s_height=.3,
p_size = 28,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
library(forecast)
library(ggfortify)
d.arima <- forecast::auto.arima(AirPassengers
)
p <- autoplot(forecast::forecast(d.arima, h = 10), predict.size = 1, size = 1)
p
autoplot
?autoplot
sticker(p, package="seer",
s_x = 1.07, s_y = 0.8, s_width=.3, s_height=.3,
p_size = 28,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
p <- autoplot(forecast::forecast(d.arima, h = 10), predict.size = 1, size = 1)
sticker(p, package="seer",
s_x = 1.07, s_y = 0.8, s_width=.3, s_height=.3,
p_size = 28,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
p <- p + theme_void() + theme_transparent()
library(ggplot2)
d.arima <- forecast::auto.arima(AirPassengers)
p <- autoplot(forecast::forecast(d.arima, h = 10), predict.size = 1, size = 1)
p <- p + theme_void() + theme_transparent()
sticker(p, package="seer",
s_x = 1.07, s_y = 0.8, s_width=.3, s_height=.3,
p_size = 28,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker(p, package="seer",
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker(p, package="seer")
p
sticker(p, package="seer",
s_x = 1.07, s_y = 0.8, s_width=.3, s_height=.3,
p_size = 32,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
?autoplot
d.arima <- forecast::auto.arima(AirPassengers)
p <- autoplot(forecast::forecast(d.arima, h = 10), predict.size = 1, size = 1)
p <- p + theme_void() + theme_transparent()+ theme(legend.title=element_blank()
)
p
p <- autoplot(forecast::forecast(d.arima, h = 10), predict.size = 1, size = 1)+ theme(legend.title=element_blank())
p
p <- autoplot(AirPassengers)+ theme(legend.title=element_blank())
p
p <- p + theme_void() + theme_transparent()
p
sticker(p, package="seer",
s_x = 1.07, s_y = 0.8, s_width=.3, s_height=.3,
p_size = 32,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker(p, package="seer",
s_x = 1, s_y = 0.8, s_width=.3, s_height=.3,
p_size = 32,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("tsplot.png", package="seer",
s_x = 1.07, s_y = 0.8, s_width=.3, s_height=.3,
p_size = 32,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
imgurl <- "https://www.bing.com/images/search?view=detailV2&ccid=iCyTxomE&id=C9D5F0AD13B52DCEE6B9FDB573ECEDEEDCC37AA6&thid=OIP.iCyTxomEFt1Fhc5UluTLkQHaHa&mediaurl=https%3a%2f%2fcdn.pixabay.com%2fphoto%2f2012%2f04%2f23%2f15%2f01%2fwater-38389_640.png&exph=640&expw=640&q=free+image+for+crystal+ball&simid=608055126771303286&selectedIndex=21&ajaxhist=0"
sticker(imgurl, package="seer",
s_x = 1.07, s_y = 0.8, s_width=.3, s_height=.3,
p_size = 32,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
imgurl <- "https://cdn.pixabay.com/photo/2012/04/23/15/01/water-38389_640.png"
sticker(imgurl, package="seer",
s_x = 1.07, s_y = 0.8, s_width=.3, s_height=.3,
p_size = 32,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
imgurl <- "https://cdn.pixabay.com/photo/2012/04/23/15/01/water-38389_640.png"
sticker(imgurl, package="seer",
s_x = 1.07, s_y = 0.8, s_width=.5, s_height=.5,
p_size = 32,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("hexsticker/navy.png", package="seer",
s_x = 1.07, s_y = 0.8, s_width=.5, s_height=.5,
p_size = 32,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("hexsticker/navy.png", package="seer",
s_x = 1.07, s_y = 0.5, s_width=.5, s_height=.5,
p_size = 32,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("hexsticker/navy.png", package="seer",
s_x = 1.07, s_y = 0.5, s_width=.1, s_height=.1,
p_size = 36,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("hexsticker/navy.png", package="seer",
s_x = 1.07, s_y = 0.5, s_width=.1, s_height=.1,
p_size = 48,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("hexsticker/navy.png", package="seer",
s_x = 1.07, s_y = 0.5, s_width=.1, s_height=.1, p_y = 1.1
p_size = 36,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("hexsticker/navy.png", package="seer",
s_x = 1.07, s_y = 0.5, s_width=.1, s_height=.1, p_y = 1.1,
p_size = 36,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("hexsticker/navy.png", package="seer",
s_x = 1.07, s_y = 0.5, s_width=.1, s_height=.1, p_y = 1.1,
p_size = 48,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="seer.png")
sticker("hexsticker/navy.png", package="seer",
s_x = 1.07, s_y = 0.5, s_width=.1, s_height=.1, p_y = 1.1,
p_size = 48,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="hexsticker/seer.png")
library(seer)
library(seer)
library(seer)
library(seer)
library(seer)
library(seer)
library(seer)
library(seer)
badgecreatr::badgeplacer(status = "wip" , githubaccount = "thiyangt",githubrepo = "seer")
badgecreatr::badgeplacer(status = "wip" , githubaccount = "thiyangt",githubrepo = "seer")
badgecreatr::badgeplacer(githubaccount = "thiyangt",githubrepo = "seer")
badgecreatr::badgeplacer(githubaccount = "thiyangt",githubrepo = "seer")
devtools::install_github("rmhogervorst/badgecreatr")
library("badgecreatr")
badgecreatr::badgeplacer(githubaccount = "thiyangt",githubrepo = "seer")
badgecreatr::badgeplacer(githubaccount = "thiyangt",githubrepo = "seer")
?badgeplacer
badgeplacer(location = ".", status = "active", githubaccount = "thiyangt",
githubrepo = "seer", branch = NULL, name = "README.Rmd")
library(seer)
?sltf
?stlf
?`forecast
?forecast
?mstl
?msts
data(M4)
d1 <- convert_msts(M4[["D1"]]$x, "daily")
simulated_mstl <- lapply(d1, sim_mstlbased, Future=TRUE, Nsim=2, extralength=14, Combine=FALSE, mtd="ets")
data(M4)
d1 <- M4[["D1"]]$x
d1 <- convert_msts(d1, "daily")
simulated_mstl <- lapply(d1, sim_mstlbased, Future=TRUE, Nsim=2, extralength=14, Combine=FALSE, mtd="ets")
data(M4)
d1 <- M4[["D1"]]$x
d1 <- convert_msts(d1, "daily")
data(M4)
M4d <- seer::subset(M4, "daily")[1:2]
data(M4)
M4d <- seer::subset(M4, "daily")
data(M4)
M4d <- list(M4[["D1"]], M4[["D2"]])
daily_ts <- lapply(M4d, function(temp){temp$x <- convert_msts(temp$x, "daily")})
simulated_mstl <- lapply(daily_ts, sim_mstlbased, Future=TRUE, Nsim=2, extralength=14, Combine=FALSE, mtd="ets")
M4[["D1"]]
data(M4)
M4d <- subset(M4, "daily")
m4d <- M4d[1:2]
daily_ts <- lapply(M4d, function(temp){temp$x <- convert_msts(temp$x, "daily")})
simulated_mstl <- lapply(daily_ts, sim_mstlbased, Future=TRUE, Nsim=2, extralength=14, Combine=FALSE, mtd="ets")
data(M4)
M4d <- subset(M4, "daily")
m4d <- M4d[1:2]
daily_ts <- lapply(M4d, function(temp){temp$x <- convert_msts(temp$x, "daily")
return(temp)})
simulated_mstl <- lapply(daily_ts, sim_mstlbased, Future=TRUE, Nsim=2, extralength=14, Combine=FALSE, mtd="ets")
tslist <- list(M3[[1]], M3[[2]])
fcast_accuracy(tslist=tslist, models= c("arima","ets","rw","rwd", "theta", "nn"), database ="M3", cal_MASE, h=6, length_out = 1)
tslist <- list(M3[[1]], M3[[2]])
fcast_accuracy(tslist=tslist, models= c("arima","ets","rw","rwd", "theta", "nn", "mstl"), database ="M3", cal_MASE, h=6, length_out = 1)
?theta
?tbats
# steps 3 and 4 applied to yearly series of M1 competition
data(M1)
yealy_m1 <- subset(M1, "yearly")
# steps 3 and 4 applied to yearly series of M1 competition
data(M1)
yearly_m1 <- subset(M1, "yearly")
library(seer)
library(seer)
library(seer)
library(seer)
install.packages("roxygen2")
install.packages("rdatamarket")
install.packages("Quandl")
library(rdatamarket)
library(Quandl)
install.packages(c("broom", "ggplot2"))
#' @param seasonal if FALSE, restricts to features suitable for non-seasonal data
#' @param m frequency of the time series or minimum frequency in the case of msts objects
#' @param lagmax maximum lag at which to calculate the acf (quarterly series-5L and monthly-13L)
#' @param database whether the time series is from mcomp or other
#' @param h forecast horizon
#' @param highfreq whether the time series is weekly, daily or hourly
#' @return dataframe: each column represent a feature and each row represent a time series
#' @importFrom magrittr %>%
#' @author Thiyanga Talagala
#' @export
cal_features <- function(tslist, seasonal=FALSE, m=1, lagmax=2L, database, h, highfreq){ # tslist = yearly_m1,
if (database == "other") {
train_test <- lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
train_test <- lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
train <- lapply(train_test, function(temp){temp$training})
ts_features_pkg <- tsfeatures::tsfeatures(train, c("entropy",
"lumpiness",
"stability",
"hurst",
# "stl_features",
"acf_features",
"pacf_features",
"nonlinearity"))
# calculation of stl features: handling short and long time series
stl_ftrs <- lapply(train, function(temp){
length_temp <- length(temp)
# tryCatch({
#freq_temp <- frequency(temp)
freq_temp <- m
# }, error=function(e){freq_temp <- m})
required_length <- 2*freq_temp+1
if (length_temp >= required_length) {tsfeatures::stl_features(temp)
} else {
fcast_h <- required_length-length_temp
fcast <- forecast::forecast(temp, fcast_h)$mean
com <- ts(c(temp,fcast), start=start(temp), frequency=frequency(temp))
tsfeatures::stl_features(com)
}
})
if (highfreq==FALSE){
stl_df <- as.data.frame(do.call("rbind", stl_ftrs))
} else {
stl_df <- dplyr::bind_rows(lapply(stl_ftrs, as.data.frame.list))
namestldf <- names(stl_df)
if ("seasonal_strength1" %in% namestldf==T & "seasonal_strength2" %in% namestldf ==T){
stl_df$seasonal_strength1[is.na(stl_df$seasonal_strength1)==TRUE] =
stl_df$seasonal_strength[is.na(stl_df$"seasonal_strength")==FALSE]
stl_df$seasonal_strength2[is.na(stl_df$seasonal_strength2)==TRUE]=0
stl_df <- stl_df %>% dplyr::select(-dplyr::one_of("seasonal_strength"))
}
}
ts_features_pkg <- dplyr::bind_cols(ts_features_pkg,stl_df)
if (seasonal==FALSE){
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5", "nonlinearity")
seer_features_nonseasonal <- lapply(train, function(temp1){c(
seer::e_acf1(temp1),
seer::unitroot(temp1))})
seer_features_nonseasonal_DF <- as.data.frame(do.call("rbind", seer_features_nonseasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_nonseasonal_DF)
} else {
ts_features_pkg_name <- names(ts_features_pkg)
seasonalFeatures <- grep("seasonal_strength",ts_features_pkg_name, value = TRUE)
select_features <- c("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5","nonlinearity",
"seas_pacf", seasonalFeatures)
ts_features1 <- ts_features_pkg %>% dplyr::select(select_features)
if(highfreq==TRUE){
seer_features_seasonal <- lapply(train, function(temp1){
acf_seasonalDiff(temp1, m, lagmax)})
} else {
seer_features_seasonal <- lapply(train, function(temp1){c(seer::holtWinter_parameters(temp1),
acf_seasonalDiff(temp1, m, lagmax))})
}
seer_features_seasonal_DF <- as.data.frame(do.call("rbind", seer_features_seasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_seasonal_DF)
}
ts_featuresDF <- as.data.frame(ts_features)
ts_featuresDF <- dplyr::rename(ts_featuresDF, "spikiness" = "spike")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_acf1" = "x_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_acf1" = "diff1_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_acf1" = "diff2_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_pacf5" = "x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_pacf5" = "diff1x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_pacf5" = "diff2x_pacf5")
names_slt_df <- names(stl_df)
if("seasonal_strength" %in% names_slt_df ==TRUE){
ts_featuresDF <- dplyr::rename(ts_featuresDF, "seasonality" = "seasonal_strength")
}
length <- lapply(train, function(temp){length(temp)})
length <- unlist(length)
ts_featuresDF$N <- length
if (highfreq==FALSE){
seer_features <- lapply(train, function(temp1){c(seer::acf5(temp1), seer::holt_parameters(temp1))})
} else {
seer_features <- lapply(train, function(temp1){seer::acf5(temp1)})
}
seer_feature_DF <- as.data.frame(do.call("rbind", seer_features))
featureDF <- dplyr::bind_cols(ts_featuresDF,seer_feature_DF)
featureDF <- tibble::as_tibble(featureDF)
return(featureDF)
}
#'@examples
require(Mcomp)
data(M3)
yearly_m3 <- subset(M3, "yearly")
cal_features(yearly_m3, database="M3", h=6, highfreq=FALSE)
library(ForeCA)
cal_features(yearly_m3, database="M3", h=6, highfreq=FALSE)
install.packages("ForeCA")
yearly_m3 <- subset(M3, "yearly")
cal_features(yearly_m3, database="M3", h=6, highfreq=FALSE)
library(tsfeatures)
require(Mcomp)
data(M3)
yearly_m3 <- subset(M3, "yearly")
cal_features(yearly_m3, database="M3", h=6, highfreq=FALSE)
aa <- cal_features(yearly_m3[1:3], database="M3", h=6, highfreq=FALSE)
aa
aa$spikiness
library(seer)
#' @param seasonal if FALSE, restricts to features suitable for non-seasonal data
#' @param m frequency of the time series or minimum frequency in the case of msts objects
#' @param lagmax maximum lag at which to calculate the acf (quarterly series-5L and monthly-13L)
#' @param database whether the time series is from mcomp or other
#' @param h forecast horizon
#' @param highfreq whether the time series is weekly, daily or hourly
#' @return dataframe: each column represent a feature and each row represent a time series
#' @importFrom magrittr %>%
#' @author Thiyanga Talagala
#' @export
cal_features <- function(tslist, seasonal=FALSE, m=1, lagmax=2L, database, h, highfreq){ # tslist = yearly_m1,
if (database == "other") {
train_test <- lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
train_test <- lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
train <- lapply(train_test, function(temp){temp$training})
ts_features_pkg <- tsfeatures::tsfeatures(train, c("entropy",
"lumpiness",
"stability",
"hurst",
# "stl_features",
"acf_features",
"pacf_features",
"nonlinearity"))
# calculation of stl features: handling short and long time series
stl_ftrs <- lapply(train, function(temp){
length_temp <- length(temp)
# tryCatch({
#freq_temp <- frequency(temp)
freq_temp <- m
# }, error=function(e){freq_temp <- m})
required_length <- 2*freq_temp+1
if (length_temp >= required_length) {tsfeatures::stl_features(temp)
} else {
fcast_h <- required_length-length_temp
fcast <- forecast::forecast(temp, fcast_h)$mean
com <- ts(c(temp,fcast), start=start(temp), frequency=frequency(temp))
tsfeatures::stl_features(com)
}
})
if (highfreq==FALSE){
stl_df <- as.data.frame(do.call("rbind", stl_ftrs))
} else {
stl_df <- dplyr::bind_rows(lapply(stl_ftrs, as.data.frame.list))
namestldf <- names(stl_df)
if ("seasonal_strength1" %in% namestldf==T & "seasonal_strength2" %in% namestldf ==T){
stl_df$seasonal_strength1[is.na(stl_df$seasonal_strength1)==TRUE] =
stl_df$seasonal_strength[is.na(stl_df$"seasonal_strength")==FALSE]
stl_df$seasonal_strength2[is.na(stl_df$seasonal_strength2)==TRUE]=0
stl_df <- stl_df %>% dplyr::select(-dplyr::one_of("seasonal_strength"))
}
}
ts_features_pkg <- dplyr::bind_cols(ts_features_pkg,stl_df)
if (seasonal==FALSE){
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5", "nonlinearity")
seer_features_nonseasonal <- lapply(train, function(temp1){c(
seer::e_acf1(temp1),
seer::unitroot(temp1))})
seer_features_nonseasonal_DF <- as.data.frame(do.call("rbind", seer_features_nonseasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_nonseasonal_DF)
} else {
ts_features_pkg_name <- names(ts_features_pkg)
seasonalFeatures <- grep("seasonal_strength",ts_features_pkg_name, value = TRUE)
select_features <- c("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5","nonlinearity",
"seas_pacf", seasonalFeatures)
ts_features1 <- ts_features_pkg %>% dplyr::select(select_features)
if(highfreq==TRUE){
seer_features_seasonal <- lapply(train, function(temp1){
acf_seasonalDiff(temp1, m, lagmax)})
} else {
seer_features_seasonal <- lapply(train, function(temp1){c(seer::holtWinter_parameters(temp1),
acf_seasonalDiff(temp1, m, lagmax))})
}
seer_features_seasonal_DF <- as.data.frame(do.call("rbind", seer_features_seasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_seasonal_DF)
}
ts_featuresDF <- as.data.frame(ts_features)
ts_featuresDF <- dplyr::rename(ts_featuresDF, "spikiness" = "spike")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_acf1" = "x_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_acf1" = "diff1_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_acf1" = "diff2_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_pacf5" = "x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_pacf5" = "diff1x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_pacf5" = "diff2x_pacf5")
names_slt_df <- names(stl_df)
if("seasonal_strength" %in% names_slt_df ==TRUE){
ts_featuresDF <- dplyr::rename(ts_featuresDF, "seasonality" = "seasonal_strength")
}
length <- lapply(train, function(temp){length(temp)})
length <- unlist(length)
ts_featuresDF$N <- length
if (highfreq==FALSE){
seer_features <- lapply(train, function(temp1){c(seer::acf5(temp1), seer::holt_parameters(temp1))})
} else {
seer_features <- lapply(train, function(temp1){seer::acf5(temp1)})
}
seer_feature_DF <- as.data.frame(do.call("rbind", seer_features))
featureDF <- dplyr::bind_cols(ts_featuresDF,seer_feature_DF)
return(featureDF)
}
aa <- cal_features(yearly_m3[1:3], database="M3", h=6, highfreq=FALSE)
aa
plot(M3[[1]]$x)
plot(M3[[2]]$x)
plot(M3[[3]]$x)
library(seer)
