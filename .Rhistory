ts_features_pkg_name <- names(ts_features_pkg)
seasonalFeatures <- grep("seasonal_strength",ts_features_pkg_name, value = TRUE)
select_features <- c("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5","nonlinearity",
"seas_pacf", seasonalFeatures)
ts_features1 <- ts_features_pkg %>% dplyr::select(select_features)
if(highfreq==TRUE){
seer_features_seasonal <- lapply(train, function(temp1){
acf_seasonalDiff(temp1, m, lagmax)})
} else {
seer_features_seasonal <- lapply(train, function(temp1){c(seer::holtWinter_parameters(temp1),
acf_seasonalDiff(temp1, m, lagmax))})
}
seer_features_seasonal_DF <- as.data.frame(do.call("rbind", seer_features_seasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_seasonal_DF)
}
ts_featuresDF <- as.data.frame(ts_features)
ts_featuresDF <- dplyr::rename(ts_featuresDF, "spikiness" = "spike")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_acf1" = "x_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_acf1" = "diff1_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_acf1" = "diff2_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_pacf5" = "x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_pacf5" = "diff1x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_pacf5" = "diff2x_pacf5")
names_slt_df <- names(stl_df)
if("seasonal_strength" %in% names_slt_df ==TRUE){
ts_featuresDF <- dplyr::rename(ts_featuresDF, "seasonality" = "seasonal_strength")
}
length <- lapply(train, function(temp){length(temp)})
length <- unlist(length)
ts_featuresDF$N <- length
if (highfreq==FALSE){
seer_features <- lapply(train, function(temp1){c(seer::acf5(temp1), seer::holt_parameters(temp1))})
} else {
seer_features <- lapply(train, function(temp1){seer::acf5(temp1)})
}
seer_feature_DF <- as.data.frame(do.call("rbind", seer_features))
featureDF <- dplyr::bind_cols(ts_featuresDF,seer_feature_DF)
featureDF <- tibble::as_tibble(featureDF)
return(featureDF)
}
#'@examples
require(Mcomp)
data(M3)
yearly_m3 <- subset(M3, "yearly")
cal_features(yearly_m3, database="M3", h=6, highfreq=FALSE)
library(tsfeatures)
a <- cal_features(yearly_m3[1:3], database="M3", h=6, highfreq=FALSE)
a
head(a,3)
head(a,3)
library(seer)
#' preparation of training set
#'
#' Preparation of a training set for random forest training
#' @param accuracy_set output from the fcast_accuracy
#' @param feature_set output from the cal_features
#' @return dataframe consisting features and classlabels
#' @importFrom magrittr %>%
#' @export
prepare_trainingset <- function(accuracy_set, feature_set){
accuracy_measures <- as.data.frame(accuracy_set$accuracy)
minimum_accuracy <- apply(accuracy_measures,1,min, na.rm=TRUE)
inf_indices <- which(minimum_accuracy==Inf)
na_indices <- which(is.na(minimum_accuracy)==TRUE)
rmv_indices <- c(inf_indices, na_indices)
accuracy_measures$ARIMA_name <- as.character(accuracy_set$ARIMA)
accuracy_measures$ETS_name <- as.character(accuracy_set$ETS)
training_set <- dplyr::bind_cols(feature_set, accuracy_measures)
if(length(rmv_indices)!=0) {training_set <- training_set[-rmv_indices, ]}
# find the classlabel corresponds to minimum
colnames_accuracyMatrix <- colnames(accuracy_set$accuracy)
df_accuracy <- dplyr::select(training_set, colnames_accuracyMatrix)
training_set$min_label <- as.character(seer::classlabel(df_accuracy))
training_set$model_names <- ifelse(training_set$min_label == "arima", training_set$ARIMA_name, training_set$min_label)
training_set$model_names <- ifelse(training_set$min_label == "ets", training_set$ETS_name, training_set$model_names)
training_set$model_names <- as.character(training_set$model_names)
# classify labe names
df_modnames <- split_names(training_set$model_names)
classlabel <- classify_labels(df_modnames)
training_set$classlabels <- classlabel
# extract complete cases only
drop.cols <- colnames(accuracy_set$accuracy)
training_set <- training_set %>% dplyr::select(-dplyr::one_of(drop.cols))
training_set <- training_set[complete.cases(training_set),]
models <- tibble::tibble(ARIMA_name=training_set$ARIMA_name, ETS_name=training_set$ETS_name,
min_label=training_set$min_label, model_names=training_set$model_names)
training_set <- dplyr::select(training_set, c(colnames(feature_set), "classlabels"))
training_set <- tibble::as_tibble(training_set)
train <- list(modelinfo=models, trainingset=training_set)
return(train)
}
#'@example
library(Mcomp)
tslist <- list(M3[[1]], M3[[2]], M3[[3]], M3[[4]], M3[[5]])
acc_set <- fcast_accuracy(tslist=tslist,
models= c("arima","ets","rw","rwd", "theta", "nn", "snaive", "mstl"),
database ="M3", cal_MASE, h=6)
#' @param tslist a list of time series
#' @param models a vector of models to compute
#' @param database whether the time series is from mcomp or other
#' @param accuracyFun function to calculate the accuracy measure, the arguments
#' for the accuracy function should be training, test and forecast
#' @param h forecast horizon
#' @param length_out number of measures calculated by a single function
#' @return a list with accuracy matrix, vector of arima models and vector of ets models
#' @author Thiyanga Talagala
#' @export
fcast_accuracy <- function(tslist, models = c("ets", "arima", "rw", "rwd", "wn",
"theta", "stlar", "nn", "snaive", "mstlarima","mstlets", "tbats"), database
, accuracyFun, h, length_out){
arima_models <- NA
ets_models <- NA
if (database == "other") {
train_test <- lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
train_test <- lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
if ("arima"%in% models) {
arima_cal <- lapply(train_test, accuracy_arima, function_name=accuracyFun)
arima_models <- sapply(arima_cal, function(temp){temp$ARIMAmodel})
}
if ("ets"%in% models) {
ets_cal <- lapply(train_test, accuracy_ets, function_name=accuracyFun)
ets_models <- sapply(ets_cal, function(temp){temp$ETSmodel})
}
mat <- sapply(models, function(f){
switch(f,
arima = sapply(arima_cal, function(temp){temp$ARIMAaccuracy}),
ets = sapply(ets_cal, function(temp){temp$ETSaccuracy}),
rw = sapply(train_test, accuracy_rw, function_name=accuracyFun),
rwd = sapply(train_test, accuracy_rwd, function_name=accuracyFun, length_out=length_out),
wn = sapply(train_test, accuracy_wn, function_name=accuracyFun, length_out=length_out),
theta = sapply(train_test, accuracy_theta, function_name=accuracyFun, length_out=length_out),
stlar = sapply(train_test, accuracy_stlar, function_name=accuracyFun, length_out=length_out),
nn = sapply(train_test, accuracy_nn, function_name=accuracyFun, length_out=length_out),
snaive = sapply(train_test, accuracy_snaive, function_name=accuracyFun, length_out=length_out),
mstlets = sapply(train_test, accuracy_mstl, function_name=accuracyFun, length_out=length_out, mtd="ets"),
mstlarima = sapply(train_test, accuracy_mstl, function_name=accuracyFun, length_out=length_out, mtd="arima"),
tbats = sapply(train_test, accuracy_tbats, function_name=accuracyFun, length_out=length_out)
)
})
return(list(accuracy=mat, ARIMA = arima_models, ETS =ets_models))
}
library(Mcomp)
tslist <- list(M3[[1]], M3[[2]], M3[[3]], M3[[4]], M3[[5]])
acc_set <- fcast_accuracy(tslist=tslist,
models= c("arima","ets","rw","rwd", "theta", "nn", "snaive", "mstl"),
database ="M3", cal_MASE, h=6)
library(seer)
library(Mcomp)
tslist <- list(M3[[1]], M3[[2]], M3[[3]], M3[[4]], M3[[5]])
acc_set <- fcast_accuracy(tslist=tslist,
models= c("arima","ets","rw","rwd", "theta", "nn", "snaive", "mstl"),
database ="M3", cal_MASE, h=6)
fea_set <- cal_features(tslist, database="M3", h=6)
outcome <- prepare_trainingset(acc_set, fea_set)
fea_set <- cal_features(tslist, database="M3", h=6, highfreq=FALSE)
fea_set <- cal_features(yearly_m1, database="M1", h=6, highfreq = FALSE)
#' @param seasonal if FALSE, restricts to features suitable for non-seasonal data
#' @param m frequency of the time series or minimum frequency in the case of msts objects
#' @param lagmax maximum lag at which to calculate the acf (quarterly series-5L and monthly-13L)
#' @param database whether the time series is from mcomp or other
#' @param h forecast horizon
#' @param highfreq whether the time series is weekly, daily or hourly
#' @return dataframe: each column represent a feature and each row represent a time series
#' @importFrom magrittr %>%
#' @author Thiyanga Talagala
#' @export
cal_features <- function(tslist, seasonal=FALSE, m=1, lagmax=2L, database, h, highfreq){ # tslist = yearly_m1,
if (database == "other") {
train_test <- lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
train_test <- lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
train <- lapply(train_test, function(temp){temp$training})
ts_features_pkg <- tsfeatures::tsfeatures(train, c("entropy",
"lumpiness",
"stability",
"hurst",
# "stl_features",
"acf_features",
"pacf_features",
"nonlinearity"))
# calculation of stl features: handling short and long time series
stl_ftrs <- lapply(train, function(temp){
length_temp <- length(temp)
# tryCatch({
#freq_temp <- frequency(temp)
freq_temp <- m
# }, error=function(e){freq_temp <- m})
required_length <- 2*freq_temp+1
if (length_temp >= required_length) {tsfeatures::tsfeatures(temp, features = c("stl_features"))
} else {
fcast_h <- required_length-length_temp
fcast <- forecast::forecast(temp, fcast_h)$mean
com <- ts(c(temp,fcast), start=start(temp), frequency=frequency(temp))
tsfeatures::tsfeatures(com, features=c("stl_features"))
}
})
if (highfreq==FALSE){
stl_df <- as.data.frame(do.call("rbind", stl_ftrs))
} else {
stl_df <- dplyr::bind_rows(lapply(stl_ftrs, as.data.frame.list))
namestldf <- names(stl_df)
if ("seasonal_strength1" %in% namestldf==T & "seasonal_strength2" %in% namestldf ==T){
stl_df$seasonal_strength1[is.na(stl_df$seasonal_strength1)==TRUE] =
stl_df$seasonal_strength[is.na(stl_df$"seasonal_strength")==FALSE]
stl_df$seasonal_strength2[is.na(stl_df$seasonal_strength2)==TRUE]=0
stl_df <- stl_df %>% dplyr::select(-dplyr::one_of("seasonal_strength"))
}
}
ts_features_pkg <- dplyr::bind_cols(ts_features_pkg,stl_df)
if (seasonal==FALSE){
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5", "nonlinearity")
seer_features_nonseasonal <- lapply(train, function(temp1){c(
seer::e_acf1(temp1),
seer::unitroot(temp1))})
seer_features_nonseasonal_DF <- as.data.frame(do.call("rbind", seer_features_nonseasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_nonseasonal_DF)
} else {
ts_features_pkg_name <- names(ts_features_pkg)
seasonalFeatures <- grep("seasonal_strength",ts_features_pkg_name, value = TRUE)
select_features <- c("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5","nonlinearity",
"seas_pacf", seasonalFeatures)
ts_features1 <- ts_features_pkg %>% dplyr::select(select_features)
if(highfreq==TRUE){
seer_features_seasonal <- lapply(train, function(temp1){
acf_seasonalDiff(temp1, m, lagmax)})
} else {
seer_features_seasonal <- lapply(train, function(temp1){c(seer::holtWinter_parameters(temp1),
acf_seasonalDiff(temp1, m, lagmax))})
}
seer_features_seasonal_DF <- as.data.frame(do.call("rbind", seer_features_seasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_seasonal_DF)
}
ts_featuresDF <- as.data.frame(ts_features)
ts_featuresDF <- dplyr::rename(ts_featuresDF, "spikiness" = "spike")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_acf1" = "x_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_acf1" = "diff1_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_acf1" = "diff2_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_pacf5" = "x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_pacf5" = "diff1x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_pacf5" = "diff2x_pacf5")
names_slt_df <- names(stl_df)
if("seasonal_strength" %in% names_slt_df ==TRUE){
ts_featuresDF <- dplyr::rename(ts_featuresDF, "seasonality" = "seasonal_strength")
}
length <- lapply(train, function(temp){length(temp)})
length <- unlist(length)
ts_featuresDF$N <- length
if (highfreq==FALSE){
seer_features <- lapply(train, function(temp1){c(seer::acf5(temp1), seer::holt_parameters(temp1))})
} else {
seer_features <- lapply(train, function(temp1){seer::acf5(temp1)})
}
seer_feature_DF <- as.data.frame(do.call("rbind", seer_features))
featureDF <- dplyr::bind_cols(ts_featuresDF,seer_feature_DF)
featureDF <- tibble::as_tibble(featureDF)
return(featureDF)
}
#'@examples
require(Mcomp)
data(M3)
yearly_m3 <- subset(M3, "yearly")
cal_features(yearly_m3, database="M3", h=6, highfreq=FALSE)
library(ForeCA)
library(seer)
library(tsfeatures)
require(Mcomp)
data(M3)
yearly_m3 <- subset(M3, "yearly")
cal_features(yearly_m3, database="M3", h=6, highfreq=FALSE)
library(Mcomp)
tslist <- list(M3[[1]], M3[[2]], M3[[3]], M3[[4]], M3[[5]])
acc_set <- fcast_accuracy(tslist=tslist,
models= c("arima","ets","rw","rwd", "theta", "nn", "snaive", "mstl"),
database ="M3", cal_MASE, h=6)
fea_set <- cal_features(tslist, database="M3", h=6, highfreq=FALSE)
fea_set
outcome <- prepare_trainingset(acc_set, fea_set)
acc_set
fea_set
outcome <- prepare_trainingset(acc_set, fea_set)
fea_set <- as.data.frame(fea_set)
fea_set
outcome <- prepare_trainingset(acc_set, fea_set)
library(seer)
library(Mcomp)
tslist <- list(M3[[1]], M3[[2]], M3[[3]], M3[[4]], M3[[5]])
acc_set <- fcast_accuracy(tslist=tslist,
models= c("arima","ets","rw","rwd", "theta", "nn", "snaive", "mstl"),
database ="M3", cal_MASE, h=6)
fea_set <- cal_features(tslist, database="M3", h=6, highfreq=FALSE)
outcome <- prepare_trainingset(acc_set, fea_set)
fea_set
accuracy_set <- acc_set
feature_set <- fea_set
accuracy_measures <- as.data.frame(accuracy_set$accuracy)
accuracy_set$accuracy
library(Mcomp)
tslist <- list(M3[[1]], M3[[2]], M3[[3]], M3[[4]], M3[[5]])
acc_set <- fcast_accuracy(tslist=tslist,
models= c("arima","ets","rw","rwd", "theta", "nn", "snaive"),
database ="M3", cal_MASE, h=6)
fea_set <- cal_features(tslist, database="M3", h=6, highfreq=FALSE)
outcome <- prepare_trainingset(acc_set, fea_set)
outcome$trainingset
outcome$modelinfo
outcome$modelinfo$ETS_name
library(seer)
library(tsfeatures)
M3yearly_features <- cal_features(yearly_m3, database="M3", h=6, highfreq = FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README-"
)
library(Mcomp)
data(M3)
yearly_m3 <- subset(M3, "yearly")
m3y <- M3[1:2]
library(seer)
simulated_arima <- lapply(m3y, sim_arimabased, Future=TRUE, Nsim=2, extralength=6, Combine=FALSE)
simulated_arima
library(tsfeatures)
M3yearly_features <- cal_features(yearly_m3, database="M3", h=6, highfreq = FALSE)
library(seer)
M3yearly_features <- cal_features(yearly_m3, database="M3", h=6, highfreq = FALSE)
devtools::install_github("thiyangt/seer")
library(seer)
cal_features
#' @param seasonal if FALSE, restricts to features suitable for non-seasonal data
#' @param m frequency of the time series or minimum frequency in the case of msts objects
#' @param lagmax maximum lag at which to calculate the acf (quarterly series-5L and monthly-13L)
#' @param database whether the time series is from mcomp or other
#' @param h forecast horizon
#' @param highfreq whether the time series is weekly, daily or hourly
#' @return dataframe: each column represent a feature and each row represent a time series
#' @importFrom magrittr %>%
#' @author Thiyanga Talagala
#' @export
cal_features <- function(tslist, seasonal=FALSE, m=1, lagmax=2L, database, h, highfreq){ # tslist = yearly_m1,
if (database == "other") {
train_test <- lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
train_test <- lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
train <- lapply(train_test, function(temp){temp$training})
ts_features_pkg <- tsfeatures::tsfeatures(train, c("entropy",
"lumpiness",
"stability",
"hurst",
# "stl_features",
"acf_features",
"pacf_features",
"nonlinearity"))
# calculation of stl features: handling short and long time series
stl_ftrs <- lapply(train, function(temp){
length_temp <- length(temp)
# tryCatch({
#freq_temp <- frequency(temp)
freq_temp <- m
# }, error=function(e){freq_temp <- m})
required_length <- 2*freq_temp+1
if (length_temp >= required_length) {tsfeatures::tsfeatures(temp, features = c("stl_features"))
} else {
fcast_h <- required_length-length_temp
fcast <- forecast::forecast(temp, fcast_h)$mean
com <- ts(c(temp,fcast), start=start(temp), frequency=frequency(temp))
tsfeatures::tsfeatures(com, features=c("stl_features"))
}
})
if (highfreq==FALSE){
stl_df <- as.data.frame(do.call("rbind", stl_ftrs))
} else {
stl_df <- dplyr::bind_rows(lapply(stl_ftrs, as.data.frame.list))
namestldf <- names(stl_df)
if ("seasonal_strength1" %in% namestldf==T & "seasonal_strength2" %in% namestldf ==T){
stl_df$seasonal_strength1[is.na(stl_df$seasonal_strength1)==TRUE] =
stl_df$seasonal_strength[is.na(stl_df$"seasonal_strength")==FALSE]
stl_df$seasonal_strength2[is.na(stl_df$seasonal_strength2)==TRUE]=0
stl_df <- stl_df %>% dplyr::select(-dplyr::one_of("seasonal_strength"))
}
}
ts_features_pkg <- dplyr::bind_cols(ts_features_pkg,stl_df)
if (seasonal==FALSE){
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5", "nonlinearity")
seer_features_nonseasonal <- lapply(train, function(temp1){c(
seer::e_acf1(temp1),
seer::unitroot(temp1))})
seer_features_nonseasonal_DF <- as.data.frame(do.call("rbind", seer_features_nonseasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_nonseasonal_DF)
} else {
ts_features_pkg_name <- names(ts_features_pkg)
seasonalFeatures <- grep("seasonal_strength",ts_features_pkg_name, value = TRUE)
select_features <- c("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5","nonlinearity",
"seas_pacf", seasonalFeatures)
ts_features1 <- ts_features_pkg %>% dplyr::select(select_features)
if(highfreq==TRUE){
seer_features_seasonal <- lapply(train, function(temp1){
acf_seasonalDiff(temp1, m, lagmax)})
} else {
seer_features_seasonal <- lapply(train, function(temp1){c(seer::holtWinter_parameters(temp1),
acf_seasonalDiff(temp1, m, lagmax))})
}
seer_features_seasonal_DF <- as.data.frame(do.call("rbind", seer_features_seasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_seasonal_DF)
}
ts_featuresDF <- as.data.frame(ts_features)
ts_featuresDF <- dplyr::rename(ts_featuresDF, "spikiness" = "spike")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_acf1" = "x_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_acf1" = "diff1_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_acf1" = "diff2_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_pacf5" = "x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_pacf5" = "diff1x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_pacf5" = "diff2x_pacf5")
names_slt_df <- names(stl_df)
if("seasonal_strength" %in% names_slt_df ==TRUE){
ts_featuresDF <- dplyr::rename(ts_featuresDF, "seasonality" = "seasonal_strength")
}
length <- lapply(train, function(temp){length(temp)})
length <- unlist(length)
ts_featuresDF$N <- length
if (highfreq==FALSE){
seer_features <- lapply(train, function(temp1){c(seer::acf5(temp1), seer::holt_parameters(temp1))})
} else {
seer_features <- lapply(train, function(temp1){seer::acf5(temp1)})
}
seer_feature_DF <- as.data.frame(do.call("rbind", seer_features))
featureDF <- dplyr::bind_cols(ts_featuresDF,seer_feature_DF)
featureDF <- tibble::as_tibble(featureDF)
return(featureDF)
}
?cal_features
cal_features(yearly_m3, database="M3", h=6, highfreq = FALSE)
cal_features()
cal_features
features_simulated_arima <- seer::cal_features(simulated_arima, database = "other", h=6, highfreq = FALSE)
simulated_arima
lapply(simulated_arima, cal_features, h=6, database="other")})
lapply(simulated_arima, cal_features, h=6, database="other")
lapply(simulated_arima, cal_features, h=6, database="other", highfreq=FALSE)
if (!require('hexSticker')) install.packages('hexSticker')
library(hexSticker)
sticker("hexsticker/navy.png", package="seer",
s_x = 1.07, s_y = 0.5, s_width=.1, s_height=.1, p_y = 1.1,
p_size = 48,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="logo/seer.png")
sticker("logo/navy.png", package="seer",
s_x = 1.07, s_y = 0.5, s_width=.1, s_height=.1, p_y = 1.1,
p_size = 48,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="logo/seer.png")
sticker("logo/navy.png", package="seer",
s_x = 1.07, s_y = 0.5, s_width=.4, s_height=.6, p_y = 1.1,
p_size = 20,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="logo/seer.png")
sticker("logo/navy.png", package="seer",
s_x = 1.07, s_y = 0.5, s_width=.4, s_height=.4, p_y = 1.1,
p_size = 48,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="logo/seer.png")
sticker("logo/navy.png", package="seer",
s_x = 1.06, s_y = 0.4, s_width=.4, s_height=.4, p_y = 1.1,
p_size = 48,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="logo/seer.png")
sticker("logo/navy.png", package="seer",
s_x = 1.06, s_y = 0.4, s_width=.4, s_height=.4, p_y = .1,
p_size = 48,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="logo/seer.png")
sticker("logo/navy.png", package="seer",
s_x = .07, s_y = 0.5, s_width=.1, s_height=.1, p_y = 1.1,
p_size = 48,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="logo/seer.png")
library(hexSticker)
sticker("logo/navy.png", package="seer",
s_x = .07, s_y = 0.5, s_width=.1, s_height=.1, p_y = 1.1,
p_size = 48,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="logo/seer.png")
sticker("logo/navy.png", package="seer",
s_x = .07, s_y = 0.5, s_width=.1, s_height=.1, p_y = 1.1,
p_size = 48,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="logo/seer.png")
if (!require('hexSticker')) install.packages('hexSticker')
library(hexSticker)
sticker("logo/navy.png", package="seer",
s_x = 1, s_y = 0.75, s_width=.6,
p_size = 8,
h_color="mediumspringgreen", h_fill="navy", p_color = "mediumspringgreen",
filename="logo/seer.png")
