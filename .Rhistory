#for the value of 1 meaning True and 0 meaning False
dummy_mat <- data.frame(model.matrix(~outcome_-1,data=df))
df_final <- data.frame(df[,1:4],dummy_mat)
df_final <- df_final[,c("Model", "p", "d", "q", "outcome_with_drift", "outcome_with_non_zero_mean")]
return(df_final)
}
library(seer)
vect_mod <- c("ARIMA(2,1,0)", "ARIMA(2,0,0)" )
split_names(vect_mod)
vect_mod2 <- c("ARIMA(2,1,0) with drift", "ARIMA(2,0,0) with non-zero mean" ,"ARIMA(2,0,0) with non-zero mean" ,
"ARIMA(2,0,0) with non-zero mean" ,"ARIMA(0,0,1)")
split_names(vect_mod2)
models <- vect_mod2
models
###Here we have choosen the separator as space(\\s), parenthesis ( \\( and \\) ) and commas (,)
df <- data.frame(str_split_fixed(models,"\\s|\\(|\\)|,",n=5))
#Rename basis the question, into follwing:
#p is the number of autoregressive terms(AR)
#d is the number of nonseasonal differences needed for stationarity(MA)
#q is the number of lagged forecast errors in the prediction equation(order of differencing)
names(df) <- c("Model","p","d","q","outcome")
df
length(nchar(trimws(df$outcome))==0)
length(nchar(trimws(df$outcome))=="")
length(nchar(trimws(df$outcome))==" ")
which(nchar(trimws(df$outcome))==0)
length(which(nchar(trimws(df$outcome))==0))
###Here we have choosen the separator as space(\\s), parenthesis ( \\( and \\) ) and commas (,)
df <- data.frame(str_split_fixed(models,"\\s|\\(|\\)|,",n=5))
#Rename basis the question, into follwing:
#p is the number of autoregressive terms(AR)
#d is the number of nonseasonal differences needed for stationarity(MA)
#q is the number of lagged forecast errors in the prediction equation(order of differencing)
names(df) <- c("Model","p","d","q","outcome")
# If the outcome column contains all "" stop the code from here
if(length(which(nchar(trimws(df$outcome))==0))==dim(df)[1]){
df <- dplyr::select(df, c("Model", "p", "d", "q"))
return(df)}
#cleaning the outcome column by replacing spaces and dashes with underscores
df$outcome_ <- gsub("\\s|-","_",trimws(df$outcome))
#' split the names of ARIMA and ETS models
#'
#' split the names of ARIMA, ETS models to model name, different number of parameters
#' in each case.
#'
#' @param models vector of model names
#' @return a dataframe where columns gives the description of model components
#' @export
split_names <- function(models){
###Here we have choosen the separator as space(\\s), parenthesis ( \\( and \\) ) and commas (,)
df <- data.frame(str_split_fixed(models,"\\s|\\(|\\)|,",n=5))
#Rename basis the question, into follwing:
#p is the number of autoregressive terms(AR)
#d is the number of nonseasonal differences needed for stationarity(MA)
#q is the number of lagged forecast errors in the prediction equation(order of differencing)
names(df) <- c("Model","p","d","q","outcome")
# If the outcome column contains all "" stop the code from here
if(length(which(nchar(trimws(df$outcome))==0))==dim(df)[1]){
df <- dplyr::select(df, c("Model", "p", "d", "q"))
return(df)}
#cleaning the outcome column by replacing spaces and dashes with underscores
df$outcome_ <- gsub("\\s|-","_",trimws(df$outcome))
#using model.matrix to calculate the dummies for drift and non zero mean,
#for the value of 1 meaning True and 0 meaning False
dummy_mat <- data.frame(model.matrix(~outcome_-1,data=df))
df_final <- data.frame(df[,1:4],dummy_mat)
df_final <- df_final[,c("Model", "p", "d", "q", "outcome_with_drift", "outcome_with_non_zero_mean")]
return(df_final)
}
split_names(vect_mod2)
library(seer)
library(seer)
library(Mcomp)
a <- M3[[3000]]$x
as.character(auto.arima(a))
a <- M3[[3500]]$x
a <- M3[[1000]]$x
a
as.character(auto.arima(a))
plot(a)
a <- M3[[1600]]$x
plot(a)
a <- M3[[2000]]$x
a
plot(a)
as.character(auto.arima(a))
vect_mod2 <- c("ARIMA(2,1,0) with drift", "ARIMA(2,0,0) with non-zero mean" ,"ARIMA(2,0,0) with non-zero mean" ,
"ARIMA(2,0,0) with non-zero mean" ,"ARIMA(0,0,1)", "ARIMA(2,0,0)(1,0,0)[12] with non-zero mean")
split_names(vect_mod2)
value = "[12]"
temp <- grep(value, name, fixed=T)
name <- "ARIMA(2,0,0)(1,0,0)[12] with non-zero mean"
value = "[12]"
temp <- grep(value, name, fixed=T)
temp
value = c("[12]", "[4]")
temp <- grep(value, name, fixed=T)
grep(value, name, fixed=T)
toMatch = c("[12]", "[4]")
#temp <- grep(value, name, fixed=T)
temp <- unique (grep(paste(toMatch,collapse="|"),
name, value=TRUE))
temp
#temp <- grep(value, name, fixed=T)
temp <- unique (grep(paste(toMatch,collapse="|"),
name, fixed=TRUE))
temp
name <- "ARIMA(2,0,0)(1,0,0)with non-zero mean"
#temp <- grep(value, name, fixed=T)
temp <- unique (grep(paste(toMatch,collapse="|"),
name, fixed=TRUE))
temp
name <- "ARIMA(2,0,0)(1,0,0)[4]with non-zero mean"
#temp <- grep(value, name, fixed=T)
temp <- unique (grep(paste(toMatch,collapse="|"),
name, fixed=TRUE))
temp
name <- "ARIMA(2,0,0)(1,0,0)[4] with non-zero mean"
#temp <- grep(value, name, fixed=T)
temp <- unique (grep(paste(toMatch,collapse="|"),
name, fixed=TRUE))
temp
temp <- grep(value, name, fixed=T)
toMatch = c("[4]")
temp <- grep(value, name, fixed=T)
temp <- grep(toMatch, name, fixed=T)
name <- "ARIMA(2,0,0)(1,0,0)[4] with non-zero mean"
temp
toMatch = c("[4]", "[12]")
temp <- grep(paste(toMatch,collapse="|"),
name, fixed=TRUE)
temp
temp <- grep(paste(toMatch,collapse="|"), LETTERS)
temp
name <- "ARIMA(2,0,0)(1,0,0)[4] with non-zero mean"
toMatch = c("[4]", "[12]")
temp <- grep(toMatch, name, fixed=T)
temp <- grep(paste(toMatch,collapse="|"), LETTERS)
temp
models <- "ARIMA(2,0,0)(1,0,0)[4] with non-zero mean"
grep(paste(toMatch,collapse='|'), names(models))
names
toMatch = c("[4]", "[12]")
temp <- grep(toMatch, models, fixed=T)
temp <- grep(paste(toMatch,collapse="|"), models, fixed=T)
temp
toMatch = c("[4]")
temp <- grep(toMatch, models, fixed=T)
temp
paste(toMatch,collapse="|")
toMatch = c("[4]", "[12]")
paste(toMatch,collapse="|")
temp <- grep(paste(toMatch,collapse="|"), models, value=T)
temp
models <- "ARIMA(2,0,0)(1,0,0) with non-zero mean"
temp <- grep(paste(toMatch,collapse="|"), models, value=T)
temp
temp <- grep("[*]", models, fixed=T)
temp
models <- "ARIMA(2,0,0)(1,0,0)[4] with non-zero mean"
temp <- grep("[*]", models, fixed=T)
temp
temp <- grep("[1-9]", models, fixed=T)
temp
toMatch = "\\[|\\]"
temp <- grep(toMatch, models, fixed=T)
temp
models
#' Classify labels according to the FFORMS famework
#'
#' This function further classify class labels as in FFORMS framework
#'
#' @param df_final a dataframe: output from split_names function
#' @param classlabels returns a vector of class labels in FFORMS framewok
#' @export
classify_labels <- function(df_final){
if (df_final[i, "Model"] == "ARIMA") {
ar_coef <- as.numeric(as.character(df_final[i, "p"]))
num_diff <- as.numeric(as.character(df_final[i, "d"]))
ma_coef <- as.numeric(as.character(df_final[i, "q"]))
arma <- sum(ar_coef, ma_coef)
drift <- as.numeric(df_final[i, "outcome_with_drift"] == 1)
if (arma!=0 & num_diff== 0){
classlabel <- "ARMA/AR/MA"
} else
classlabel <- "ARIMA"
} else if(df_final[i, "Model"] == "ETS"){
error <- as.character(df_final[i, "p"])
trend <- as.character(df_final[i, "d"])
seasonality <- as.character(df_final[i, "q"])
if(error== "A" & trend== "A" & seasonality== "A") {
classlabel <- "ETS-trendseasonal"
} else if (error== "A" & trend== "A" & seasonality== "N") {
classlabel <- "ETS-trend"
} else if (error== "A" & trend== "Ad" & seasonality== "A"){
classlabel <- "ETS-dampedtrendseasonal"
}else if (error== "A" & trend== "Ad" & seasonality== "N"){
classlabel <- "ETS-dampedtrend"
}else if (error== "A" & trend== "N" & seasonality== "A"){
classlabel <- "ETS-seasonal"
} else if (error== "A" & trend== "N" & seasonality== "N"){
classlabel <- "ETS-notrendnoseasonal"
}else if (error== "M" & trend== "A" & seasonality== "A"){
classlabel <- "ETS-trendseasonal"
} else if (error== "M" & trend== "A" & seasonality== "M"){
classlabel <- "ETS-trendseasonal"
} else if (error== "M" & trend== "A" & seasonality== "N"){
classlabel <- "ETS-trend"
}else if (error== "M" & trend== "Ad" & seasonality== "A"){
classlabel <- "ETS-dampedtrendseasonal"
}else if (error== "M" & trend== "Ad" & seasonality== "M"){
classlabel <- "ETS-dampedtrendseasonal"
}else if (error== "M" & trend== "Ad" & seasonality== "N"){
classlabel <- "ETS-dampedtrend"
}else if (error== "M" & trend== "N" & seasonality== "A"){
classlabel <- "ETS-seasonal"
}else if (error== "M" & trend== "N" & seasonality== "M"){
classlabel <- "ETS-seasonal"
}else
classlabel <- "ETS-notrendnoseasonal"
} else {
classlabel <- df_final[i, "Model"]
}
return(classlabel)
}
vect <- c(c("ARIMA(2,1,0) with drift", "ARIMA(2,0,0) with non-zero mean" ,"ARIMA(2,0,0) with non-zero mean" ,
"ARIMA(2,0,0) with non-zero mean" ,"ARIMA(0,0,1)", "ETS(A, A, A)"))
df_modnames <- split_names(vect)
classlabels <- classify_labels(df_modnames)
#' Classify labels according to the FFORMS famework
#'
#' This function further classify class labels as in FFORMS framework
#'
#' @param df_final a dataframe: output from split_names function
#' @param classlabels returns a vector of class labels in FFORMS framewok
#' @export
classify_labels <- function(df_final){
length_df <- df_final[1]
classlabel <- as.character(length_df)
for(i in 1:length_df){
if (df_final[i, "Model"] == "ARIMA") {
ar_coef <- as.numeric(as.character(df_final[i, "p"]))
num_diff <- as.numeric(as.character(df_final[i, "d"]))
ma_coef <- as.numeric(as.character(df_final[i, "q"]))
arma <- sum(ar_coef, ma_coef)
drift <- as.numeric(df_final[i, "outcome_with_drift"] == 1)
if (arma!=0 & num_diff== 0){
classlabel <- "ARMA/AR/MA"
} else
classlabel <- "ARIMA"
} else if(df_final[i, "Model"] == "ETS"){
error <- as.character(df_final[i, "p"])
trend <- as.character(df_final[i, "d"])
seasonality <- as.character(df_final[i, "q"])
if(error== "A" & trend== "A" & seasonality== "A") {
classlabel <- "ETS-trendseasonal"
} else if (error== "A" & trend== "A" & seasonality== "N") {
classlabel <- "ETS-trend"
} else if (error== "A" & trend== "Ad" & seasonality== "A"){
classlabel <- "ETS-dampedtrendseasonal"
}else if (error== "A" & trend== "Ad" & seasonality== "N"){
classlabel <- "ETS-dampedtrend"
}else if (error== "A" & trend== "N" & seasonality== "A"){
classlabel <- "ETS-seasonal"
} else if (error== "A" & trend== "N" & seasonality== "N"){
classlabel <- "ETS-notrendnoseasonal"
}else if (error== "M" & trend== "A" & seasonality== "A"){
classlabel <- "ETS-trendseasonal"
} else if (error== "M" & trend== "A" & seasonality== "M"){
classlabel <- "ETS-trendseasonal"
} else if (error== "M" & trend== "A" & seasonality== "N"){
classlabel <- "ETS-trend"
}else if (error== "M" & trend== "Ad" & seasonality== "A"){
classlabel <- "ETS-dampedtrendseasonal"
}else if (error== "M" & trend== "Ad" & seasonality== "M"){
classlabel <- "ETS-dampedtrendseasonal"
}else if (error== "M" & trend== "Ad" & seasonality== "N"){
classlabel <- "ETS-dampedtrend"
}else if (error== "M" & trend== "N" & seasonality== "A"){
classlabel <- "ETS-seasonal"
}else if (error== "M" & trend== "N" & seasonality== "M"){
classlabel <- "ETS-seasonal"
}else
classlabel <- "ETS-notrendnoseasonal"
} else {
classlabel <- df_final[i, "Model"]
}
}
return(classlabel)
}
#'@example
vect <- c(c("ARIMA(2,1,0) with drift", "ARIMA(2,0,0) with non-zero mean" ,"ARIMA(2,0,0) with non-zero mean" ,
"ARIMA(2,0,0) with non-zero mean" ,"ARIMA(0,0,1)", "ETS(A, A, A)"))
df_modnames <- split_names(vect)
classlabels <- classify_labels(df_modnames)
#' Classify labels according to the FFORMS famework
#'
#' This function further classify class labels as in FFORMS framework
#'
#' @param df_final a dataframe: output from split_names function
#' @param classlabels returns a vector of class labels in FFORMS framewok
#' @export
classify_labels <- function(df_final){
length_df <- dim(df_final)[1]
classlabel <- as.character(length_df)
for(i in 1:length_df){
if (df_final[i, "Model"] == "ARIMA") {
ar_coef <- as.numeric(as.character(df_final[i, "p"]))
num_diff <- as.numeric(as.character(df_final[i, "d"]))
ma_coef <- as.numeric(as.character(df_final[i, "q"]))
arma <- sum(ar_coef, ma_coef)
drift <- as.numeric(df_final[i, "outcome_with_drift"] == 1)
if (arma!=0 & num_diff== 0){
classlabel <- "ARMA/AR/MA"
} else
classlabel <- "ARIMA"
} else if(df_final[i, "Model"] == "ETS"){
error <- as.character(df_final[i, "p"])
trend <- as.character(df_final[i, "d"])
seasonality <- as.character(df_final[i, "q"])
if(error== "A" & trend== "A" & seasonality== "A") {
classlabel <- "ETS-trendseasonal"
} else if (error== "A" & trend== "A" & seasonality== "N") {
classlabel <- "ETS-trend"
} else if (error== "A" & trend== "Ad" & seasonality== "A"){
classlabel <- "ETS-dampedtrendseasonal"
}else if (error== "A" & trend== "Ad" & seasonality== "N"){
classlabel <- "ETS-dampedtrend"
}else if (error== "A" & trend== "N" & seasonality== "A"){
classlabel <- "ETS-seasonal"
} else if (error== "A" & trend== "N" & seasonality== "N"){
classlabel <- "ETS-notrendnoseasonal"
}else if (error== "M" & trend== "A" & seasonality== "A"){
classlabel <- "ETS-trendseasonal"
} else if (error== "M" & trend== "A" & seasonality== "M"){
classlabel <- "ETS-trendseasonal"
} else if (error== "M" & trend== "A" & seasonality== "N"){
classlabel <- "ETS-trend"
}else if (error== "M" & trend== "Ad" & seasonality== "A"){
classlabel <- "ETS-dampedtrendseasonal"
}else if (error== "M" & trend== "Ad" & seasonality== "M"){
classlabel <- "ETS-dampedtrendseasonal"
}else if (error== "M" & trend== "Ad" & seasonality== "N"){
classlabel <- "ETS-dampedtrend"
}else if (error== "M" & trend== "N" & seasonality== "A"){
classlabel <- "ETS-seasonal"
}else if (error== "M" & trend== "N" & seasonality== "M"){
classlabel <- "ETS-seasonal"
}else
classlabel <- "ETS-notrendnoseasonal"
} else {
classlabel <- df_final[i, "Model"]
}
}
return(classlabel)
}
#'@example
vect <- c(c("ARIMA(2,1,0) with drift", "ARIMA(2,0,0) with non-zero mean" ,"ARIMA(2,0,0) with non-zero mean" ,
"ARIMA(2,0,0) with non-zero mean" ,"ARIMA(0,0,1)", "ETS(A, A, A)"))
df_modnames <- split_names(vect)
classlabels <- classify_labels(df_modnames)
classlabels
#' Classify labels according to the FFORMS famework
#'
#' This function further classify class labels as in FFORMS framework
#'
#' @param df_final a dataframe: output from split_names function
#' @param classlabels returns a vector of class labels in FFORMS framewok
#' @export
classify_labels <- function(df_final){
length_df <- dim(df_final)[1]
classlabel <- as.character(length_df)
for(i in 1:length_df){
if (df_final[i, "Model"] == "ARIMA") {
ar_coef <- as.numeric(as.character(df_final[i, "p"]))
num_diff <- as.numeric(as.character(df_final[i, "d"]))
ma_coef <- as.numeric(as.character(df_final[i, "q"]))
arma <- sum(ar_coef, ma_coef)
drift <- as.numeric(df_final[i, "outcome_with_drift"] == 1)
if (arma!=0 & num_diff== 0){
classlabel[i] <- "ARMA/AR/MA"
} else
classlabel[i] <- "ARIMA"
} else if(df_final[i, "Model"] == "ETS"){
error <- as.character(df_final[i, "p"])
trend <- as.character(df_final[i, "d"])
seasonality <- as.character(df_final[i, "q"])
if(error== "A" & trend== "A" & seasonality== "A") {
classlabel[i] <- "ETS-trendseasonal"
} else if (error== "A" & trend== "A" & seasonality== "N") {
classlabel[i] <- "ETS-trend"
} else if (error== "A" & trend== "Ad" & seasonality== "A"){
classlabel[i] <- "ETS-dampedtrendseasonal"
}else if (error== "A" & trend== "Ad" & seasonality== "N"){
classlabel[i] <- "ETS-dampedtrend"
}else if (error== "A" & trend== "N" & seasonality== "A"){
classlabel[i] <- "ETS-seasonal"
} else if (error== "A" & trend== "N" & seasonality== "N"){
classlabel[i] <- "ETS-notrendnoseasonal"
}else if (error== "M" & trend== "A" & seasonality== "A"){
classlabel[i] <- "ETS-trendseasonal"
} else if (error== "M" & trend== "A" & seasonality== "M"){
classlabel[i] <- "ETS-trendseasonal"
} else if (error== "M" & trend== "A" & seasonality== "N"){
classlabel[i] <- "ETS-trend"
}else if (error== "M" & trend== "Ad" & seasonality== "A"){
classlabel[i] <- "ETS-dampedtrendseasonal"
}else if (error== "M" & trend== "Ad" & seasonality== "M"){
classlabel[i] <- "ETS-dampedtrendseasonal"
}else if (error== "M" & trend== "Ad" & seasonality== "N"){
classlabel[i] <- "ETS-dampedtrend"
}else if (error== "M" & trend== "N" & seasonality== "A"){
classlabel[i] <- "ETS-seasonal"
}else if (error== "M" & trend== "N" & seasonality== "M"){
classlabel[i] <- "ETS-seasonal"
}else
classlabel[i] <- "ETS-notrendnoseasonal"
} else {
classlabel[i] <- df_final[i, "Model"]
}
}
return(classlabel)
}
#'@example
vect <- c(c("ARIMA(2,1,0) with drift", "ARIMA(2,0,0) with non-zero mean" ,"ARIMA(2,0,0) with non-zero mean" ,
"ARIMA(2,0,0) with non-zero mean" ,"ARIMA(0,0,1)", "ETS(A, A, A)"))
df_modnames <- split_names(vect)
classlabels <- classify_labels(df_modnames)
classlabels
vect <- c(c("ARIMA(2,1,0) with drift", "ARIMA(2,0,0) with non-zero mean" ,"ARIMA(2,0,0) with non-zero mean" ,
"ARIMA(2,0,0) with non-zero mean" ,"ARIMA(0,0,1)", "ETS(A,A,A)"))
df_modnames <- split_names(vect)
classlabels <- classify_labels(df_modnames)
classlabels
vect <- c(c("ARIMA(2,1,0) with drift", "ARIMA(2,0,0) with non-zero mean" ,"ARIMA(2,0,0) with non-zero mean" ,
"ARIMA(2,0,0) with non-zero mean" ,"ARIMA(0,0,1)", "ETS(A,A,A)", "rwd",
"ETS(A,N,N)"))
df_modnames <- split_names(vect)
classlabels <- classify_labels(df_modnames)
classlabels
#' Classify labels according to the FFORMS famework
#'
#' This function further classify class labels as in FFORMS framework
#' @param bestmethod a vector: names of best forecasting methods
#' @param df_final a dataframe: output from split_names function
#' @param classlabels returns a vector of class labels in FFORMS framewok
#' @export
classify_labels <- function(df_final, bestmethod){
length_df <- dim(df_final)[1]
classlabel <- as.character(length_df)
for(i in 1:length_df){
if (df_final[i, "Model"] == "ARIMA") {
ar_coef <- as.numeric(as.character(df_final[i, "p"]))
num_diff <- as.numeric(as.character(df_final[i, "d"]))
ma_coef <- as.numeric(as.character(df_final[i, "q"]))
arma <- sum(ar_coef, ma_coef)
drift <- as.numeric(df_final[i, "outcome_with_drift"] == 1)
if (arma!=0 & num_diff== 0){
classlabel[i] <- "ARMA/AR/MA"
} else
classlabel[i] <- "ARIMA"
} else if(df_final[i, "Model"] == "ETS"){
error <- as.character(df_final[i, "p"])
trend <- as.character(df_final[i, "d"])
seasonality <- as.character(df_final[i, "q"])
if(error== "A" & trend== "A" & seasonality== "A") {
classlabel[i] <- "ETS-trendseasonal"
} else if (error== "A" & trend== "A" & seasonality== "N") {
classlabel[i] <- "ETS-trend"
} else if (error== "A" & trend== "Ad" & seasonality== "A"){
classlabel[i] <- "ETS-dampedtrendseasonal"
}else if (error== "A" & trend== "Ad" & seasonality== "N"){
classlabel[i] <- "ETS-dampedtrend"
}else if (error== "A" & trend== "N" & seasonality== "A"){
classlabel[i] <- "ETS-seasonal"
} else if (error== "A" & trend== "N" & seasonality== "N"){
classlabel[i] <- "ETS-notrendnoseasonal"
}else if (error== "M" & trend== "A" & seasonality== "A"){
classlabel[i] <- "ETS-trendseasonal"
} else if (error== "M" & trend== "A" & seasonality== "M"){
classlabel[i] <- "ETS-trendseasonal"
} else if (error== "M" & trend== "A" & seasonality== "N"){
classlabel[i] <- "ETS-trend"
}else if (error== "M" & trend== "Ad" & seasonality== "A"){
classlabel[i] <- "ETS-dampedtrendseasonal"
}else if (error== "M" & trend== "Ad" & seasonality== "M"){
classlabel[i] <- "ETS-dampedtrendseasonal"
}else if (error== "M" & trend== "Ad" & seasonality== "N"){
classlabel[i] <- "ETS-dampedtrend"
}else if (error== "M" & trend== "N" & seasonality== "A"){
classlabel[i] <- "ETS-seasonal"
}else if (error== "M" & trend== "N" & seasonality== "M"){
classlabel[i] <- "ETS-seasonal"
}else
classlabel[i] <- "ETS-notrendnoseasonal"
} else {
classlabel[i] <- bestmethod[i]
}
}
return(classlabel)
}
#'@example
vect <- c(c("ARIMA(2,1,0) with drift", "ARIMA(2,0,0) with non-zero mean" ,"ARIMA(2,0,0) with non-zero mean" ,
"ARIMA(2,0,0) with non-zero mean" ,"ARIMA(0,0,1)", "ETS(A,A,A)", "rwd",
"ETS(A,N,N)"))
df_modnames <- split_names(vect)
classlabels <- classify_labels(df_modnames)
classlabels <- classify_labels(df_modnames, vect)
classlabels
library(seer)
library(seer)
library(seer)
