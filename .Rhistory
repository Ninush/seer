"seas_pacf")
if(highfreq==TRUE){
seer_features_seasonal <- lapply(train, function(temp1){
acf_seasonalDiff(temp1, m, lagmax)})
} else {
seer_features_seasonal <- lapply(train, function(temp1){c(seer::holtWinter_parameters(temp1),
acf_seasonalDiff(temp1, m, lagmax))})
}
seer_features_seasonal_DF <- as.data.frame(do.call("rbind", seer_features_seasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_seasonal_DF)
}
ts_featuresDF <- as.data.frame(ts_features)
ts_featuresDF <- dplyr::rename(ts_featuresDF, "spikiness" = "spike")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_acf1" = "x_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_acf1" = "diff1_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_acf1" = "diff2_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_pacf5" = "x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_pacf5" = "diff1x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_pacf5" = "diff2x_pacf5")
if(seasonal==TRUE){
ts_featuresDF <- dplyr::rename(ts_featuresDF, "seasonality" = "seasonal_strength")
}
length <- lapply(train, function(temp){length(temp)})
length <- unlist(length)
ts_featuresDF$N <- length
if (highfreq==TRUE){
seer_features <- lapply(train, function(temp1){c(seer::acf5(temp1), seer::holt_parameters(temp1))})
} else {
seer_features <- lapply(train, function(temp1){seer::acf5(temp1)})
}
seer_feature_DF <- as.data.frame(do.call("rbind", seer_features))
featureDF <- dplyr::bind_cols(ts_featuresDF,seer_feature_DF)
return(featureDF)
}
#'@examples
require(Mcomp)
data(M3)
yearly_m3 <- subset(M3, "yearly")
cal_features(yearly_m3, database="M3", h=6, highfreq=FALSE)
library(tsfeatures)
library(forecast)
#'@examples
require(Mcomp)
data(M3)
yearly_m3 <- subset(M3, "yearly")
cal_features(yearly_m3, database="M3", h=6, highfreq=FALSE)
library(seer)
data("M4")
d1 <- subset(M4, "daily")
plot(d[[1]]$x)
plot(d1[[1]]$x)
acf(d1[[1]]$x)
frequency(d1[[1]]$x)
s1 <- diff(d[[1]]$x, lag=365, differences = 1)
s1 <- diff(d1[[1]]$x, lag=365, differences = 1)
acf(s1)
acf(d1[[1]]$x)
acf(s1)
acf(d1[[2]]$x)
acf(d1[[3]]$x)
s1 <- diff(d1[[3]]$x, lag=365, differences = 1)
acf(S1)
acf(s1)
s1
s1 <- diff(d1[[3]]$x, lag=365, differences = 1)
s1
acf(d1[[4]]$x)
acf(d1[[5]]$x)
acf(d1[[6]]$x)
acf(d1[[7]]$x)
acf(d1[[8]]$x)
acf(d1[[9]]$x)
acf(d1[[10]]$x)
acf(d1[[11]]$x)
acf(d1[[12]]$x)
acf(d1[[13]]$x)
acf(d1[[14]]$x)
acf(d1[[15]]$x)
plot(d1[[15]]$x)
s1 <- diff(d1[[3]]$x, lag=7, differences = 1)
acf(s1)
s1 <- diff(d1[[1]]$x, lag=7, differences = 1)
acf(s1)
ets(d1[[1]]$x)
ets(d1[[3]]$x)
ets(d1[[4]]$x)
plot(d1[[4]]$x)
frequency(d1[[4]]$x)
ets(d1[[5]]$x)
length(d1[[5]]$x)
ets(d1[[6]]$x)
library(seer)
library(seer)
library(seer)
install.packages("ggplot2")
library(ggplot2)
install.packages("forecast")
library(seer)
data(M4)
M4_weekly <- subset(M4, "weekly")
sl <- sapply(M4_weekly, function(temp){length(temp$x)})
which(s1==80)
s1
which(sl==80)
aa <- M4_weekly[[295]]
aa
train <- aa$x
length(train)
# calculation of stl features: handling short and long time series
stl_ftrs <- lapply(train, function(temp){
length_temp <- length(temp)
required_length <- 2*frequency(temp)
if (length_temp > required_length) {tsfeatures::stl_features(temp)
} else {
fcast_h <- required_length-length_temp
fcast <- forecast::forecast(temp, fcast_h)$mean
com <- ts(c(temp,fcast), start=start(temp), frequency=frequency(temp))
tsfeatures::stl_features(temp)
}
})
temp <- train
length_temp <- length(temp)
required_length <- 2*frequency(temp)
length_temp > required_length
# calculation of stl features: handling short and long time series
stl_ftrs <- lapply(train, function(temp){
length_temp <- length(temp)
required_length <- 2*frequency(temp)
if (length_temp > required_length) {tsfeatures::stl_features(temp)
} else {
fcast_h <- required_length-length_temp
fcast <- forecast::forecast(temp, fcast_h)$mean
com <- ts(c(temp,fcast), start=start(temp), frequency=frequency(temp))
tsfeatures::stl_features(com)
}
})
train
# calculation of stl features: handling short and long time series
stl_ftrs <- lapply(train, function(temp){
length_temp <- length(temp)
required_length <- 2*frequency(temp)
if (length_temp > required_length) {tsfeatures::stl_features(temp)
} else {
fcast_h <- required_length-length_temp
fcast <- forecast::forecast(temp, fcast_h)$mean
com <- ts(c(temp,fcast), start=start(temp), frequency=frequency(temp))
tsfeatures::stl_features(com)
}
})
length_temp <- length(temp)
required_length <- 2*frequency(temp)
required_length
length_temp
length_temp > required_length
fcast_h <- required_length-length_temp
fcast_h
fcast <- forecast::forecast(temp, fcast_h)$mean
com <- ts(c(temp,fcast), start=start(temp), frequency=frequency(temp))
length(com)
tsfeatures::stl_features(com)
# calculation of stl features: handling short and long time series
stl_ftrs <- lapply(train, function(temp){
length_temp <- length(temp)
required_length <- 2*frequency(temp)+1
if (length_temp > required_length) {tsfeatures::stl_features(temp)
} else {
fcast_h <- required_length-length_temp
fcast <- forecast::forecast(temp, fcast_h)$mean
com <- ts(c(temp,fcast), start=start(temp), frequency=frequency(temp))
tsfeatures::stl_features(com)
}
})
library(seer)
library(seer)
library(seer)
library(seer)
strings <- c("seasonal_strength", "seasonal_strength1", "sea_strength", "seasonal_strengt")
strings <- c("seasonal_strength", "seasonal_strength1", "sea_strength", "seasonal_strengt")
grep("seasonal_strength", strings, value = TRUE)
class(vec)
vec <- grep("seasonal_strength", strings, value = TRUE)
class(vec)
data(M4)
m4d <- subset(M4, "daily")
a <- m4d[[1]]$x
d1 <- msts(a, seasonal.periods = c(7, 365.25))
d2 <- msts(a, seasonal.periods = c(365.25))
library(seer)
d1 <- msts(a, seasonal.periods = c(7, 365.25))
library(forecast)
d1 <- msts(a, seasonal.periods = c(7, 365.25))
d2 <- msts(a, seasonal.periods = c(365.25))
listd <- list(d1, d2)
#' @param seasonal if FALSE, restricts to features suitable for non-seasonal data
#' @param m frequency of the time series
#' @param lagmax maximum lag at which to calculate the acf (quarterly series-5L and monthly-13L)
#' @param database whether the time series is from mcomp or other
#' @param h forecast horizon
#' @param highfreq whether the time series is weekly, daily or hourly
#' @return dataframe: each column represent a feature and each row represent a time series
#' @importFrom magrittr %>%
#' @author Thiyanga Talagala
#' @export
cal_features <- function(tslist, seasonal=FALSE, m=1, lagmax=2L, database, h, highfreq){ # tslist = yearly_m1,
if (database == "other") {
train_test <- lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
train_test <- lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
train <- lapply(train_test, function(temp){temp$training})
ts_features_pkg <- tsfeatures::tsfeatures(train, c("entropy",
"lumpiness",
"stability",
"hurst",
# "stl_features",
"acf_features",
"pacf_features",
"nonlinearity"))
# calculation of stl features: handling short and long time series
stl_ftrs <- lapply(train, function(temp){
length_temp <- length(temp)
# tryCatch({
freq_temp <- frequency(temp)
# }, error=function(e){freq_temp <- m})
required_length <- 2*freq_temp+1
if (length_temp > required_length) {tsfeatures::stl_features(temp)
} else {
fcast_h <- required_length-length_temp
fcast <- forecast::forecast(temp, fcast_h)$mean
com <- ts(c(temp,fcast), start=start(temp), frequency=frequency(temp))
tsfeatures::stl_features(com)
}
})
stl_df <- as.data.frame(do.call("rbind", stl_ftrs))
ts_features_pkg <- dplyr::bind_cols(ts_features_pkg,stl_df)
if (seasonal==FALSE){
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5", "nonlinearity")
seer_features_nonseasonal <- lapply(train, function(temp1){c(
seer::e_acf1(temp1),
seer::unitroot(temp1))})
seer_features_nonseasonal_DF <- as.data.frame(do.call("rbind", seer_features_nonseasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_nonseasonal_DF)
} else {
tf <- names(ts_features_pkg)
seasonalFeatures <- grep("seasonal_strength", tf, value = TRUE)
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5","nonlinearity", "seasonal_strength",
"seas_pacf", seasonalFeatures)
if(highfreq==TRUE){
seer_features_seasonal <- lapply(train, function(temp1){
acf_seasonalDiff(temp1, m, lagmax)})
} else {
seer_features_seasonal <- lapply(train, function(temp1){c(seer::holtWinter_parameters(temp1),
acf_seasonalDiff(temp1, m, lagmax))})
}
seer_features_seasonal_DF <- as.data.frame(do.call("rbind", seer_features_seasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_seasonal_DF)
}
ts_featuresDF <- as.data.frame(ts_features)
ts_featuresDF <- dplyr::rename(ts_featuresDF, "spikiness" = "spike")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_acf1" = "x_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_acf1" = "diff1_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_acf1" = "diff2_acf1")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "y_pacf5" = "x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff1y_pacf5" = "diff1x_pacf5")
ts_featuresDF <- dplyr::rename(ts_featuresDF, "diff2y_pacf5" = "diff2x_pacf5")
if(seasonal==TRUE){
ts_featuresDF <- dplyr::rename(ts_featuresDF, "seasonality" = "seasonal_strength")
}
length <- lapply(train, function(temp){length(temp)})
length <- unlist(length)
ts_featuresDF$N <- length
if (highfreq==FALSE){
seer_features <- lapply(train, function(temp1){c(seer::acf5(temp1), seer::holt_parameters(temp1))})
} else {
seer_features <- lapply(train, function(temp1){seer::acf5(temp1)})
}
seer_feature_DF <- as.data.frame(do.call("rbind", seer_features))
featureDF <- dplyr::bind_cols(ts_featuresDF,seer_feature_DF)
return(featureDF)
}
cal_features(d1, seasonal=TRUE, m=7, lagmax=8L, database="other", h=0, highfreq = T)
train = d1
train
ts_features_pkg <- tsfeatures::tsfeatures(train, c("entropy",
"lumpiness",
"stability",
"hurst",
# "stl_features",
"acf_features",
"pacf_features",
"nonlinearity"))
library(tsfeatures)
library(ForeCA)
ts_features_pkg <- tsfeatures::tsfeatures(train, c("entropy",
"lumpiness",
"stability",
"hurst",
# "stl_features",
"acf_features",
"pacf_features",
"nonlinearity"))
# calculation of stl features: handling short and long time series
stl_ftrs <- lapply(train, function(temp){
length_temp <- length(temp)
# tryCatch({
freq_temp <- frequency(temp)
# }, error=function(e){freq_temp <- m})
required_length <- 2*freq_temp+1
if (length_temp > required_length) {tsfeatures::stl_features(temp)
} else {
fcast_h <- required_length-length_temp
fcast <- forecast::forecast(temp, fcast_h)$mean
com <- ts(c(temp,fcast), start=start(temp), frequency=frequency(temp))
tsfeatures::stl_features(com)
}
})
stl_df <- as.data.frame(do.call("rbind", stl_ftrs))
ts_features_pkg <- dplyr::bind_cols(ts_features_pkg,stl_df)
if (seasonal==FALSE){
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5", "nonlinearity")
seer_features_nonseasonal <- lapply(train, function(temp1){c(
seer::e_acf1(temp1),
seer::unitroot(temp1))})
seer_features_nonseasonal_DF <- as.data.frame(do.call("rbind", seer_features_nonseasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_nonseasonal_DF)
} else {
tf <- names(ts_features_pkg)
seasonalFeatures <- grep("seasonal_strength", tf, value = TRUE)
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5","nonlinearity", "seasonal_strength",
"seas_pacf", seasonalFeatures)
if(highfreq==TRUE){
seer_features_seasonal <- lapply(train, function(temp1){
acf_seasonalDiff(temp1, m, lagmax)})
} else {
seer_features_seasonal <- lapply(train, function(temp1){c(seer::holtWinter_parameters(temp1),
acf_seasonalDiff(temp1, m, lagmax))})
}
seer_features_seasonal_DF <- as.data.frame(do.call("rbind", seer_features_seasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_seasonal_DF)
}
tf <- names(ts_features_pkg)
tf
seasonalFeatures <- grep("seasonal_strength", tf, value = TRUE)
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5","nonlinearity", "seasonal_strength",
"seas_pacf", seasonalFeatures)
seasonalFeatures
select_features <- c("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5","nonlinearity",
"seas_pacf", seasonalFeatures)
ts_features1 <- ts_features_pkg %>% dplyr::select (select_features)
ts_features1
a <- data.frame(aa=1:5, bb=1:5)
b <- data.frame(aa=3:7, bb=6:10)
merge(a, b, by="a", all=T)
a <- data.frame(aa=1:5, bb=1:5)
b <- data.frame(aa=3:7, bb=6:10)
merge(a, b, by="aa", all=T)
merge(a, b)
df1 <- data.frame(a=1:5, b=1:5)
df2 <- data.frame(a=1:5, b=6:10, c=11:15)
df1
df2
rbind(df1, df2)
combind <- data.frame(a=rep(1:5, 2), b=c(1:5, 6:10), c=c(NA, NA, NA, NA, NA, 11, 12, 13,14,15))
combind
dplyr::bind_rows(df1, df2)
plyr::rbind.fill(df1, df2)
training <- rnorm(100)
fit_arima <- auto.arima(training, seasonal = FALSE)
library(forecast)
forecast_arima <- forecast(fit_arima,h)$mean
fit_arima <- auto.arima(training, seasonal = FALSE)
forecast_arima <- forecast(fit_arima,h)$mean
h=6
forecast_arima <- forecast(fit_arima,h)$mean
forecast_arima
forecast(fit_arima,h)
forecast(fit_arima,h)
a <- forecast(fit_arima,h)
a$lower
?forecast
fit_arima <- auto.arima(training, seasonal = FALSE)
forecast_arima <- forecast(fit_arima,h, level=c(95))$mean
forecast_arima$mean
forecast_arima <- forecast(fit_arima,h, level=c(95))
forecast_arima
features_M4W$mean
forecast_arima$mean
forecast_arima$lower
forecast_arima$upper
m4y <- subset(M4, "yearly")
data(M4)
m4y <- subset(M4, "yearly")
tslist <- m4y
lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
fcast_mean <- data.frame()
fcast_mean <- data.frame(5,)
fcast_mean <- data.frame()
fit_arima <- auto.arima(training, seasonal = FALSE)
fcast <- forecast(fit_arima,h, level=c(95))
fcast_mean[1,] <- fcast$mean
fcast_mean
fcast_mean[1,]
fcast_mean <- matrix(NA, ncol=1, nrow=2)
fcast_mean
fcast_mean <- matrix(NA, nrow=total_ts)
total_ts <- 2
fcast_mean <- matrix(NA, nrow=total_ts)
fcast_mean
i=1
fit_arima <- auto.arima(training, seasonal = FALSE)
fcast <- forecast(fit_arima,h, level=c(95))
forecast_mean <- matrix(NA, nrow=total_ts)
fit_arima <- auto.arima(training, seasonal = FALSE)
fcast <- forecast(fit_arima,h, level=c(95))
forecast_mean[i,] <- fcast$mean
fcast$mean
as.vector(fcast$mean)
forecast_mean[i,] <- as.vector(fcast$mean)
as.vector(fcast$mean)
forecast_mean <- matrix(NA, nrow=total_ts)
forecast_mean[i,] <- as.vector(fcast$mean)
as.vector(fcast$mean)
forecast_mean
forecast_mean[i,]
forecast_mean <- matrix(NA, nrow=total_ts, ncol=h)
fit_arima <- auto.arima(training, seasonal = FALSE)
fcast <- forecast(fit_arima,h, level=c(95))
forecast_mean[i,] <- as.vector(fcast$mean)
forecast_mean
forecast_lower <- matrix(NA, nrow=total_ts, ncol=h)
forecast_upper <- matrix(NA, nrow=total_ts, ncol=h)
forecast_lower[i] <- as.vector(fcast$lower)
forecast_upper[i] <- as.vector(fcast$upper)
forecast_lower[i,] <- as.vector(fcast$lower)
forecast_upper[i,] <- as.vector(fcast$upper)
forecast_lower
forecast_upper
fit_ets <- ets(training, model= "ZZN", damped = TRUE)
fcast <- forecast(fit_ets,h, level=c(95))
forecast_mean[i,] <- as.vector(fcast$mean)
forecast_lower[i,] <- as.vector(fcast$lower)
forecast_upper[i,] <- as.vector(fcast$upper)
forecast_mean
forecast_lower
forecast_upper
fcast <- forecast(fit_ets,h, level=c(95))
fcast
fcast$mean
fcast$lower
forecast_lower[i,] <- as.vector(fcast$lower)
forecast_lower
fit_snaive <- snaive(training, h=h)
fit_snaive
fit_rw <- rwf(training, drift = FALSE)
forecast_rw <- forecast(fit_rw,h)$mean
forecast(fit_rw,h)
fit_rwd <- rwf(training, drift = TRUE)
forecast(fit_rwd,h)
stlar(training,h=h)
library(seer)
stlar(training,h=h)
forecTheta::stheta(training,h=h, s='additive')
forecast::thetaf(training,h=h)
as.ts(training)
training <- as.ts(training)
forecTheta::stheta(training,h=h, s='additive')
my <- subset(M3, monthly)
library(Mcomp)
my <- subset(M3, monthly)
my <- subset(M3, "monthly")
my <- my[[1]]
training <- my
forecTheta::stheta(training,h=h, s='additive')
training
training <- training$x
forecTheta::stheta(training,h=h, s='additive')
?stheta
aa <- forecTheta::stheta(training,h=h, s='additive')$lower
aa
aa <- forecTheta::stheta(training,h=h, s='additive')
aa
tt <- aa$method
class(tt)
tt
fitTheta <- forecTheta::stheta(training,h=h, s='additive')
forecast(fitTheta, 10)
?forecast
fitTheta$y
stheta
library(forecTheta)
stheta
fit_nnetar <- forecast::nnetar(training)
forecast(fit_nnetar, h=h)
forecast(fit_nnetar, h=h, level=c(95))
